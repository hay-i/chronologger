package components

import (
	"fmt"

	"github.com/hay-i/chronologger/models"
)

templ questionAnswers(question models.Question, answers []models.Answer) {
	<div>
		<div>{ question.Title }</div>
		<div>
			for _, answer := range models.AnswersForQuestion(answers, question.ID) {
				<div>{ answer.Answer }</div>
			}
		</div>
	</div>
}

templ Templates(templates []models.Template) {
	<div id="template-modal"></div>
	<div class="width-wrap">
		for _, template := range templates {
			<button
				class="btn"
				hx-get={ fmt.Sprintf("/templates/%s/modal", template.ID.Hex()) }
				hx-target="#template-modal"
				hx-trigger="click"
			>
				Preview { template.Title }
			</button>
		}
	</div>
}

templ Modal(template models.Template) {
	<div hx-ext="class-tools">
		<div class="modal-backdrop"></div>
		<div class="modal" classes="add active">
			<h1>{ template.Title }</h1>
			<a href={ templ.SafeURL(fmt.Sprintf("/templates/%s", template.ID.Hex())) } class={ btn, "btn" }>View this template</a>
			<button
				class={ btn, "btn" }
				data-dismissable="template-modal"
			>
				Close
			</button>
		</div>
	</div>
}

templ Template(template models.Template, answers []models.Answer) {
	<div>
		<div>{ template.Description }</div>
		<div>{ template.Title }</div>
		<a href={ templ.SafeURL(fmt.Sprintf("/templates/%s/start", template.ID.Hex())) } class={ btn, "btn" }>Use this template</a>
		<div>Answers per question:</div>
		for _, question := range template.Questions {
			@questionAnswers(question, answers)
		}
	</div>
}

templ Build(goal, aim string) {
	<div>
		<h1>{ goal }</h1>
		<h2>{ aim }</h2>
		<h1>Build your template:</h1>
		<section id="template-builder" class="grid">
			<aside class="left">
				<form class="sortable sortable-grid">
					<div class="draggable-input" data-type="text"><input type="hidden" name="item" value="1"/>Text Input</div>
					<div class="draggable-input" data-type="number"><input type="hidden" name="item" value="2"/>Number Input</div>
					<div class="draggable-input" data-type="range"><input type="hidden" name="item" value="3"/>Range</div>
					<div class="draggable-input" data-type="select"><input type="hidden" name="item" value="4"/>Select Input</div>
					<div class="draggable-input" data-type="radio"><input type="hidden" name="item" value="5"/>Radio Button</div>
				</form>
			</aside>
			<section class="right sortable"></section>
		</section>
	</div>
	<script>
        const leftSortable = new Sortable(document.querySelector(".left .sortable"), {
            group: {
                name: "shared",
                pull: "clone",
                put: false
            },
            animation: 150,
            ghostClass: 'blue-background-class'
        });

        const rightSortable = new Sortable(document.querySelector(".right"), {
            group: {
                name: "shared",
                pull: false,
                put: true
            },
            animation: 150,
            ghostClass: 'blue-background-class',
            onAdd: async (evt) => {
                const itemEl = evt.item;
                const inputType = itemEl.getAttribute('data-type');
                // Hacky way to get the response to render without `Base` page
                const response = await fetch(`/templates/builder?inputType=${inputType}`, { headers: { 'HX-Request': "true" } });
                const formGroupHtml = await response.text();
                itemEl.innerHTML = formGroupHtml;
            }
        });
    </script>
}

type InputType string

const (
	Text   InputType = "text"
	Number InputType = "number"
	Range  InputType = "range"
	Select InputType = "select"
	Radio  InputType = "radio"
)

templ Builder(inputType InputType) {
	switch inputType {
		case Text:
			<div class="form-group">
				<label for="text-input">Text Input</label>
				<input disabled="disabled" type="text" id="text-input" name="text-input"/>
			</div>
		case Number:
			<div class="form-group">
				<label for="number-input">Number Input</label>
				<input disabled="disabled" type="number" id="number-input" name="number-input"/>
			</div>
		case Range:
			<div class="form-group">
				<label for="range-input">Range</label>
				<input disabled="disabled" type="range" id="range-input" name="range-input"/>
			</div>
		case Select:
			<div class="form-group">
				<label for="select-input">Select Input</label>
				<select id="select-input" name="select-input">
					<option disabled="disabled" value="1">Option 1</option>
					<option disabled="disabled" value="2">Option 2</option>
					<option disabled="disabled" value="3">Option 3</option>
				</select>
			</div>
		case Radio:
			<div class="form-group">
				<label for="radio-input">Radio Button</label>
				<input type="radio" disabled="disabled" id="radio-input" name="radio-input"/>
			</div>
	}
}
