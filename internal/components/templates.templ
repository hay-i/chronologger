package components

import (
	"fmt"

	"github.com/hay-i/gooal/internal/models/views"
	"github.com/hay-i/gooal/internal/models"
)

templ Build(goal, aim, username string, template views.TemplateView) {
	<div>
		<h1>{ goal }</h1>
		<h2>{ aim }</h2>
		<h1>Build your template:</h1>
		<section class="grid">
			<aside class="left">
				<form data-sortable-left class="sortable sortable-grid">
					<div class="draggable-input" data-type="text"><input type="hidden" name="item" value="1"/>Text Input</div>
					<div class="draggable-input" data-type="number"><input type="hidden" name="item" value="2"/>Number Input</div>
					<div class="draggable-input" data-type="range"><input type="hidden" name="item" value="3"/>Range</div>
					<div class="draggable-input" data-type="select"><input type="hidden" name="item" value="4"/>Select Input</div>
					<div class="draggable-input" data-type="radio"><input type="hidden" name="item" value="5"/>Radio Button</div>
					<div class="draggable-input" data-type="text_area"><input type="hidden" name="item" value="6"/>Text Area</div>
					<div class="draggable-input" data-type="checkbox"><input type="hidden" name="item" value="7"/>Checkbox</div>
				</form>
			</aside>
			<section class="right sortable">
				<aside>
					@BuildTemplateForm(username, template)
				</aside>
			</section>
		</section>
	</div>
}

templ BuildTemplateForm(username string, template views.TemplateView) {
	@form(templ.Attributes{"hx-post": "/templates/save", "hx-swap": "outerHTML"}) {
		<div class="form-group">
			<label hidden for="title"></label>
			@input(templ.Attributes{"type": "text", "id": "title", "name": "title", "value": template.Title, "placeholder": "Title of template"})
			if template.TitleError != "" {
				<span>{ template.TitleError }</span>
			}
		</div>
		<div class="form-group">
			<label hidden for="description"></label>
			@textArea(templ.Attributes{"id": "description", "name": "description", "placeholder": "Description"}) {
				{ template.Description }
			}
			if template.DescriptionError != "" {
				<span>{ template.DescriptionError }</span>
			}
		</div>
		<input type="hidden" name="username" value={ username }/>
		<div data-sortable-right class="right-section">
			for _, questionView := range template.QuestionViews {
				<div class="draggable-input" data-type={ string(questionView.Question.Type) }>
					@TemplateBuilderInput(questionView)
				</div>
			}
		</div>
	}
}

templ TemplateBuilderInput(questionView views.QuestionView) {
	<div class="form-group">
		@labelInputFor(questionView)
		switch questionView.Question.Type {
			case models.TextQuestion:
				<input disabled="disabled" type="text"/>
			case models.NumberQuestion:
				<input disabled="disabled" type="number"/>
			case models.RangeQuestion:
				<input disabled="disabled" type="range"/>
			case models.SelectQuestion:
				<select>
					<option disabled="disabled">Option 1</option>
					<option disabled="disabled">Option 2</option>
					<option disabled="disabled">Option 3</option>
				</select>
			case models.RadioQuestion:
				<input type="radio" disabled="disabled"/>
			case models.TextAreaQuestion:
				<textarea disabled="disabled"></textarea>
			case models.CheckboxQuestion:
				<fieldset>
					<input type="checkbox" disabled="disabled"/>
					<label>Option 1</label>
					<input type="checkbox" disabled="disabled"/>
					<label>Option 2</label>
				</fieldset>
		}
		<button type="button" data-delete-row="true">X</button>
		if questionView.Error != "" {
			<span>{ questionView.Error }</span>
		}
	</div>
}

templ labelInputFor(questionView views.QuestionView) {
	<label hidden for={ fmt.Sprintf("%s-%s-%s", questionView.Question.Type, questionView.Question.ID.Hex(), questionView.Question.OrderToString()) }></label>
	@input(templ.Attributes{"type": "text", "id": fmt.Sprintf("%s-%s-%s", questionView.Question.Type, questionView.Question.ID.Hex(), questionView.Question.OrderToString()), "name": fmt.Sprintf("%s-%s-%s", questionView.Question.Type, questionView.Question.ID.Hex(), questionView.Question.OrderToString()), "value": questionView.Value, "placeholder": fmt.Sprintf("%s input", questionView.Question.Type)})
}

templ completeTemplateInput(question views.QuestionView) {
	<div class="form-group">
		<label for={ question.Question.ID.Hex() }>{ question.Label }</label>
		switch question.Question.Type {
			case models.TextQuestion:
				@input(templ.Attributes{"type": "text", "id": question.Question.ID.Hex(), "name": question.Question.ID.Hex(), "value": question.Value, "placeholder": "My answer is..."})
			case models.TextAreaQuestion:
				@textArea(templ.Attributes{"id": question.Question.ID.Hex(), "name": question.Question.ID.Hex(), "placeholder": "I did this"}) {
					{ question.Value }
				}
			case models.NumberQuestion:
				<input type="number" min="0" max="100" id={ question.Question.ID.Hex() } name={ question.Question.ID.Hex() } placeholder="Number input"/>
			case models.RangeQuestion:
				<input type="range" min="0" max="100" id={ question.Question.ID.Hex() } name={ question.Question.ID.Hex() } placeholder="Range input"/>
			case models.SelectQuestion:
				<select>
					<option>Option 1</option>
					<option>Option 2</option>
					<option>Option 3</option>
				</select>
			case models.RadioQuestion:
				<input type="radio" id={ fmt.Sprintf("%s-%s", question.Question.ID.Hex(), question.Question.ID.Hex()) } name={ fmt.Sprintf("%s-%s", question.Question.ID.Hex(), question.Question.ID.Hex()) } placeholder="Radio input"/>
			case models.CheckboxQuestion:
				<fieldset>
					<input type="checkbox"/>
					<label>Option 1</label>
					<input type="checkbox"/>
					<label>Option 2</label>
				</fieldset>
		}
		if question.Error != "" {
			<span>{ question.Error }</span>
		}
	</div>
}

templ DeleteInput() {
}

templ Complete(template models.Template, questionViews []views.QuestionView) {
	<div id="template-form">
		<h1>{ template.Title }</h1>
		<h2>{ template.Description }</h2>
		@form(templ.Attributes{"hx-post": fmt.Sprintf("/templates/%s/complete", template.ID.Hex()), "hx-swap": "outerHTML", "hx-target": "#template-form"}) {
			for _, question := range questionViews {
				@completeTemplateInput(question)
			}
		}
	</div>
}
